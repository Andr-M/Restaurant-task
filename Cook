package com.javarush.test.level27.lesson15.big01.kitchen;// Created on 08.03.2016.

import com.javarush.test.level27.lesson15.big01.ConsoleHelper;
import com.javarush.test.level27.lesson15.big01.statistic.StatisticEventManager;
import com.javarush.test.level27.lesson15.big01.statistic.event.CookedOrderEventDataRow;

import java.util.Observable;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;

public class Cook extends Observable implements Runnable {
    private String name;
    private boolean busy;
    private LinkedBlockingQueue<Order> queue;
    private boolean stop = false;
    private boolean caught = false;

    public Cook(String name) {
        this.name = name;
    }

    @Override
    public void run() {
        while (!stop){
            try {
                startCookingOrder(queue.take());
            } catch (InterruptedException e){
                caught = true;
            }

            if (caught && queue.isEmpty())
                stop = true;
        }
    }

    @Override
    public String toString() {
        return name;
    }

    public void startCookingOrder(Order order){
        busy = true;
        ConsoleHelper.writeMessage("Start cooking - " + order + ", cooking time " + order.getTotalCookingTime() + "min");
        StatisticEventManager.getInstance().register(new CookedOrderEventDataRow(order.getTablet().toString(),
                name,
                order.getTotalCookingTime() * 60,
                order.getDishes()
        ));
        try {
            Thread.sleep(order.getTotalCookingTime() * 10);
        } catch (InterruptedException e){
            caught = true;
        }
        setChanged();
        notifyObservers(order);

        busy = false;
    }

    public boolean isBusy() {
        return busy;
    }

    public void setQueue(LinkedBlockingQueue<Order> queue) {
        this.queue = queue;
    }
}
